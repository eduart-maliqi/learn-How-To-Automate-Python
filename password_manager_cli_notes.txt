🧠 Python Password Manager CLI Notes
🔐 Core Concepts & Modules (Updated with Encryption)

→ Building a secure command-line password manager with encryption, validation, and safe storage.

Key Modules Used:

random.choices(population, k=n) → selects k random elements from population

string.ascii_letters + string.digits → creates charset for passwords

open(file, mode, encoding="utf-8") → file operations with proper encoding

input(prompt) → user input from command line

cryptography.fernet.Fernet → symmetric encryption/decryption

cryptography.hazmat.primitives.kdf.pbkdf2.PBKDF2HMAC → key derivation function

base64.urlsafe_b64encode() → encoding for encryption keys

os.urandom(16) → generate cryptographically secure random bytes for salt

Key Concepts:

🔑 Password Generation:
- Use random.choices() for cryptographically secure random selection
- Combine letters, digits, and safe special characters
- Configurable length with minimum validation (≥ 1)
- Label validation (no colons, non-empty)

🔐 Encryption (NEW):
- Fernet symmetric encryption for all passwords
- Master password required to unlock vault
- PBKDF2HMAC key derivation with 390,000 iterations
- SHA-256 hashing algorithm
- Persistent salt stored in vault.salt file
- Automatic encryption on save, decryption on display

💾 File Storage:
- Encrypted storage in passwords.txt
- Salt stored separately in vault.salt
- UTF-8 encoding for proper character handling
- Upsert functionality (update or insert)
- Error handling for missing files
- Backwards compatible with plaintext entries

🎯 Program Flow:
- Init crypto with master password on startup
- Main loop with menu options
- Input validation and error handling
- Duplicate detection with confirmation
- Clean exit with break statement

📝 Code Structure:

def generate_password(length: int) -> str:
    chars = random.choices(CHARSET, k=length)
    return "".join(chars)

def init_crypto():
    # Master password input
    # Load or create salt
    # Derive encryption key with PBKDF2
    # Initialize Fernet cipher

def _salt():
    # Load existing salt or generate new 16-byte salt
    # Store in vault.salt file

def create_entry():
    # Input collection with validation
    # Password generation
    # Encrypt password with Fernet
    # Save encrypted token to file

def upsert_entry(label, encrypted_value):
    # Read existing entries
    # Replace if label exists
    # Append if new
    # Write back to file

def list_passwords():
    # File reading
    # Decrypt each password with Fernet
    # Display label: decrypted_password
    # Handle legacy plaintext gracefully

def main():
    while True:
        # Menu display
        # Choice handling
        # Function calls

🔒 Security Features (UPGRADED):

✅ Fernet symmetric encryption (AES-128 in CBC mode)
✅ PBKDF2 key derivation (390,000 iterations with SHA-256)
✅ Master password protection
✅ Persistent salt for key derivation
✅ Encrypted storage (not plaintext!)
✅ Safe character set (avoiding problematic symbols)
✅ Local storage with encryption at rest
✅ Backwards compatible with legacy plaintext

⚡ Best Practices:

- Use with open() for automatic file closing
- Validate user input before processing (length ≥ 1, no ':' in labels)
- Provide clear user feedback
- Handle file not found gracefully
- Use type hints for better code quality
- Encrypt immediately after generation
- Decrypt only when displaying
- Store salt separately from encrypted data
- Use high iteration count (390,000) for PBKDF2

🔐 Encryption Workflow:

1. User enters master password
2. Load/create salt from vault.salt
3. Derive 32-byte key using PBKDF2HMAC
4. Initialize Fernet cipher with derived key
5. Generate random password
6. Encrypt with Fernet.encrypt() → returns bytes
7. Decode to string and store in file
8. On display: decrypt with Fernet.decrypt()

🔑 Quick Reference:

random + string → Password generation
cryptography.fernet → Symmetric encryption
PBKDF2HMAC → Key derivation from master password
base64 → Key encoding
os.urandom() → Secure salt generation
open() + encoding → File operations
while True + input() → Interactive menu
try/except → Error handling + backwards compatibility</content>
<parameter name="filePath">c:\Projects\Python\python.automate\learn-How-To-Automate-Python\password_manager_cli_notes.txt